ssh_options[:keys] = %w(/Users/martin/.ssh/id_rsa)
ssh_options[:forward_agent] = true 
ssh_options[:paranoid] = false

namespace :log do
  desc "tail production log files"  
  task :tail_production, :roles => :app do
    run "tail -f #{shared_path}/log/#{ENV['RAILS_ENV'] || 'production'}.log" do |channel, stream, data|
      puts # for an extra line break before the host name
      puts "#{channel[:host]}: #{data}"
      break if stream == :err
    end
  end

  desc "tail all log files"  
  task :tail, :roles => :app do
    run "tail -f #{shared_path}/log/*.log" do |channel, stream, data|
      puts # for an extra line break before the host name
      puts "#{channel[:host]}: #{data}"
      break if stream == :err
    end
  end
end

namespace :sys do
  task :ps do
    run 'ps -auxww'
  end
  
  task :top_ do
    stream "top"
  end
  
  task :saidar do
    stream "/usr/bin/saidar"
  end
end

# task :growl do system %{/usr/local/bin/growlnotify -m 'Capistrano "deploy:restart" task Done'} end
# after "deploy:restart", "growl"

set :stage, nil unless defined? stage
 
namespace :growl do
  task :notify do
    growl_send(ENV["GROWL_MESSAGE"] || "wants your attention")
  end
 
  task :alert do
    growl_send(ENV["GROWL_MESSAGE"] || "needs your attention", 2)
  end
end
 
after "deploy" do
  ENV["GROWL_MESSAGE"] = "deployed #{application} #{stage}"
  growl.notify
end
 
after "rollback" do
  ENV["GROWL_MESSAGE"] = "rolled back #{application} #{stage}"
  growl.alert
end
 
def growl_send(message, p = 1)
  require 'meow'
  icon = OSX::NSWorkspace.sharedWorkspace.iconForFile(`which cap`.chomp) 
  Meow.notify("cap", "Capistrano", message, :priority => p, :icon => icon)
rescue LoadError
  `growlnotify -ncap -p#{priority} -m #{message.inspect} Capistrano`
end


