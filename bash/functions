. ~/bin/z/z.sh

function mkcd() {
    mkdir -p "$1"
    cd "$1"
}

function title() { 
  unset PROMPT_COMMAND
  echo -ne "\033]0;$1\007"
}

function psgrep() {
	local name=$1
	ps auxww | grep -i --color=never "[${name:0:1}]${name:1}"
}

function pid() {
  psgrep "$1" | awk '{print $2}'	
}

function killgrep() {
  id=`pid "$1"`
  pid "$id" | xargs kill -9
  echo "killed $id"
}

function pw() {
  security find-generic-password -a $1 -g 2>&1 | grep password | cut -d '"' -f2
}

function imgdim() {
  if [[ $1 == '--html' || $1 == '-h' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width=\"%d\" ",  $2) }
          /pixelHeight/ { printf("height=\"%d\" ", $2) }'
  elif [[ $1 == '--css' || $1 == '-c' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width: %dpx; ",  $2) }
          /pixelHeight/ { printf("height: %dpx; ", $2) }'
  else
    sips -g pixelWidth -g pixelHeight "$1" \
    |awk '/pixelWidth/  { printf("%d X ",  $2) }
          /pixelHeight/ { printf("%d", $2) }'
  fi
}

function authme() {
  ssh $1 'mkdir -p ~/.ssh && cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
}

function gco() {
  local branch=$1
  if [[ $branch ]]; then
    git co $branch
  else
    git co master
  fi
}

# Monitor HTTP requests being made from your machine with a one-liner..
# Replace "en1" below with your network interface's name (usually en0 or en1)
# (again replace "en1" with correct network interface name)
#
# http://gist.github.com/90062

function httpdump() {
	interface="${1:-en1}"
	sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"
}
 
function t() {
  command="cd '`pwd`'"
  osascript -e 'tell application "Terminal" to activate' \
            -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
            -e "tell application \"Terminal\" to do script with command \"$command\" in last tab of window 1" \
            &>/dev/null
}

function isreg {
  whois $1 | grep -q 'No match' && echo "No" || echo "Yes"
}

function vpsstats {
  ssh myd sysinfo
}

function pman {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}

function _growl_prompt_command {
  local laststatus=$?
  eval $PREV_PROMPT_COMMAND
  growlnotify -n Shell -m "$PROMPT_MEMO exited with $laststatus" Shell
  PROMPT_COMMAND=$PREV_PROMPT_COMMAND
  PREV_PROMPT_COMMAND=
  PROMPT_MEMO=
}
 
function growldone {
  PREV_PROMPT_COMMAND=$PROMPT_COMMAND
  PROMPT_COMMAND=_growl_prompt_command
  if [ $# -gt 0 ]; then
	  PROMPT_MEMO=$@
  else
	  PROMPT_MEMO=Command
  fi
}
