function mkcd() {
    mkdir -p "$1"
    cd "$1"
}

function search() {
  find . -iname "*$1*"
}

function title() {
  unset PROMPT_COMMAND
  echo -ne "\033]0;$*\007"
}

function titled() {
  title "$*"
  $*
}

function psgrep() {
  local name=$1
  ps auxww | grep -i --color=never "[${name:0:1}]${name:1}"
}

function pid() {
  psgrep "$1" | awk '{print $2}'
}

function killgrep() {
  id=`pid "$1"`
  pid "$id" | xargs kill -9
  echo "killed $id"
}

function pw() {
  security find-generic-password -a $1 -g 2>&1 | grep password | cut -d '"' -f2
}

function imgdim() {
  if [[ $1 == '--html' || $1 == '-h' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width=\"%d\" ",  $2) }
          /pixelHeight/ { printf("height=\"%d\" ", $2) }'
  elif [[ $1 == '--css' || $1 == '-c' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width: %dpx; ",  $2) }
          /pixelHeight/ { printf("height: %dpx; ", $2) }'
  else
    for file in $*; do
      echo $file
      sips -g pixelWidth -g pixelHeight "$file" | \
        awk '/pixelWidth/  { printf("%d X ",  $2) }
             /pixelHeight/ { printf("%d\n", $2) }'
    done
  fi
}

function gco() {
  local branch=$1
  if [[ $branch ]]; then
    git co $branch
  else
    git co master
  fi
}

# Monitor HTTP requests being made from your machine with a one-liner..
# Replace "en1" below with your network interface's name (usually en0 or en1)
# (again replace "en1" with correct network interface name)
#
# http://gist.github.com/90062

function httpdump {
	interface="${1:-en1}"
	sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"
}

function pman {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Open the .xcodeproj file from the working directory (typically in Xcode).
#
#     henrik@Nyx ~/Code/iPhone/MyApp$ xc
#     # equivalent to:
#     open ~/Code/iPhone/MyApp/MyApp.xcodeproj
#
function xc {
  open `ls -d *.xcworkspace *.xcodeproj | sort -r | head -1`
}

# http://www.leancrew.com/all-this/2008/02/leopard-screen-sharing-over-the-internet/
function hometunnel {
  ssh -L $1:127.0.0.1:$2 -N laddarn
}

function vpstunnel {
  ssh -L $1:127.0.0.1:$2 -N myd
}

function vpssocks {
  ssh -ND 9999 myd
}

# changing directory to code project
function p  { cd "$HOME/Projects/$*"; }

# http://zachinglis.com/2009/make-your-rails-development-environment-slower-easily
#
# Make port 80 "real life" speeds
# You can also use Mongrel ports.
#
function slow_port {
  # Set the port variable if no port inputted. Defaulted to 80 (for Passenger).
  if [ -z "$1" ]
  then port=80
  else port=$1
  fi

  # Slow the ports.
  sudo ipfw pipe 1 config bw 15KByte/s
  sudo ipfw add 1 pipe 1 src-port $port
  sudo ipfw add 1 pipe 1 dst-port $port
  echo "Port $port succesfully slowed."
}

function unslow_port {
  sudo ipfw delete 1
  echo "Port succesfully un-slowed."
}

function ql {
  [[ -f $1 ]] && qlmanage -p $1 || echo "Quick Look: File $1 does not exist"
}
