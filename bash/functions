function mkcd() {
    mkdir -p "$1"
    cd "$1"
}

function title() { 
  unset PROMPT_COMMAND
  echo -ne "\e]0;$1\a"
}

function psgrep() {
	local name=$1
	ps auxww | grep -i --color=never "[${name:0:1}]${name:1}"
}

function pid() {
  psgrep "$1" | awk '{print $2}'	
}

function killgrep() {
  id=`pid "$1"`
  pid "$id" | xargs kill -9
  echo "killed $id"
}

function pw() {
  security find-generic-password -a $1 -g 2>&1 | grep password | cut -d '"' -f2
}

function imgdim() {
  if [[ $1 == '--html' || $1 == '-h' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width=\"%d\" ",  $2) }
          /pixelHeight/ { printf("height=\"%d\" ", $2) }'
  else
    sips -g pixelWidth -g pixelHeight "$1" \
    |awk '/pixelWidth/  { printf("%d X ",  $2) }
          /pixelHeight/ { printf("%d", $2) }'
  fi
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function git_info_for_prompt() {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    if [ -d "$g/../.dotest" ]
    then
      if test -f "$g/../.dotest/rebasing"
      then
        r="|REBASE"
      elif test -f "$g/../.dotest/applying"
      then
        r="|AM"
      else
        r="|AM/REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    elif [ -f "$g/.dotest-merge/interactive" ]
    then
      r="|REBASE-i"
      b="$(cat "$g/.dotest-merge/head-name")"
    elif [ -d "$g/.dotest-merge" ]
    then
      r="|REBASE-m"
      b="$(cat "$g/.dotest-merge/head-name")"
    elif [ -f "$g/MERGE_HEAD" ]
    then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ]
      then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
      then
        if ! b="tag: $(git describe --exact-match HEAD 2>/dev/null)"
        then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi
 
    if [ -n "$1" ]; then
      printf "$1" "${b##refs/heads/}$r"
    else
      printf " (%s)" "${b##refs/heads/}$r"
    fi
  fi
}

function authme() {
  ssh $1 'cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
}