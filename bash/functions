function mkcd() {
    mkdir -p "$1"
    cd "$1"
}

function title() {
  unset PROMPT_COMMAND
  echo -ne "\033]0;$*\007"
}

function titled() {
  title "$*"
  $*
}

function psgrep() {
	local name=$1
	ps auxww | grep -i --color=never "[${name:0:1}]${name:1}"
}

function pid() {
  psgrep "$1" | awk '{print $2}'	
}

function killgrep() {
  id=`pid "$1"`
  pid "$id" | xargs kill -9
  echo "killed $id"
}

function pw() {
  security find-generic-password -a $1 -g 2>&1 | grep password | cut -d '"' -f2
}

function imgdim() {
  if [[ $1 == '--html' || $1 == '-h' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width=\"%d\" ",  $2) }
          /pixelHeight/ { printf("height=\"%d\" ", $2) }'
  elif [[ $1 == '--css' || $1 == '-c' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width: %dpx; ",  $2) }
          /pixelHeight/ { printf("height: %dpx; ", $2) }'
  else
    sips -g pixelWidth -g pixelHeight "$1" \
    |awk '/pixelWidth/  { printf("%d X ",  $2) }
          /pixelHeight/ { printf("%d", $2) }'
  fi
}

function gco() {
  local branch=$1
  if [[ $branch ]]; then
    git co $branch
  else
    git co master
  fi
}

# Monitor HTTP requests being made from your machine with a one-liner..
# Replace "en1" below with your network interface's name (usually en0 or en1)
# (again replace "en1" with correct network interface name)
#
# http://gist.github.com/90062

function httpdump {
	interface="${1:-en1}"
	sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"
}
 
function t {
  command="cd '`pwd`'"
  osascript -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
            -e "tell application \"Terminal\" to do script with command \"$command\" in last tab of window 1" \
            &>/dev/null
}

function isreg {
  whois $1 | grep -q 'No match' && echo "No" || echo "Yes"
}

function vpsstats {
  ssh myd sysinfo
}

function pman {
  man -t "${1}" | open -f -a /Applications/Preview.app/
}

function _growl_prompt_command {
  local laststatus=$?
  eval $PREV_PROMPT_COMMAND
  growlnotify -n Shell -m "$PROMPT_MEMO exited with $laststatus" Shell
  PROMPT_COMMAND=$PREV_PROMPT_COMMAND
  PREV_PROMPT_COMMAND=
  PROMPT_MEMO=
}
 
function growldone {
  PREV_PROMPT_COMMAND=$PROMPT_COMMAND
  PROMPT_COMMAND=_growl_prompt_command
  if [ $# -gt 0 ]; then
	  PROMPT_MEMO=$@
  else
	  PROMPT_MEMO=Command
  fi
}

# Generate a Ruby on Rails migration, then open the generated file.
#
#     henrik@Nyx /myproject$ migg add_fooed_at_to_bars fooed_at:datetime
#
# http://github.com/henrik/dotfiles/commit/92b18641d825ed5e5ad503132549b1ea6c95cb2c
# 

function migg {
  if [[ -x script/generate ]]; then
    script/generate migration $@ | ruby -e 'x = ARGF.read; puts x; path = x[/create\s+(.+)/, 1]; system("open", path)'
  else
    rails generate migration $@ | ruby -e 'x = ARGF.read; puts x; path = x[/create\s+(.+)/, 1]; system("open", path)'
  fi
}

# Open the .xcodeproj file from the working directory (typically in Xcode).
#
#     henrik@Nyx ~/Code/iPhone/MyApp$ xc
#     # equivalent to:
#     open ~/Code/iPhone/MyApp/MyApp.xcodeproj
#
function xc {
  open `ls | grep .xcodeproj`
}

# http://www.leancrew.com/all-this/2008/02/leopard-screen-sharing-over-the-internet/
function hometunnel {
  ssh -L $1:127.0.0.1:$2 -N laddarn
}

function vpstunnel {
  ssh -L $1:127.0.0.1:$2 -N myd
}

function vpssocks {
  ssh -ND 9999 myd
}

# Rails
function ss {
  title "Server"
  if [ -e script/rails ]; then
    script/rails server $@
  else
    script/server $@
  fi
}

function sc {
  title "Console"
  if [ -e script/rails ]; then
    script/rails console $@
  else
    script/console $@
  fi
}

function sg {
  if [ -e script/rails ]; then
    script/rails generate $@
  else
    script/generate $@
  fi
}

function sl {
  title "Log"
  tail -f log/${1:-development}.log
}

# changing directory to code project
function p  { cd "$HOME/Projects/$*"; }
function rp { cd "$*"; }


#
# http://zachinglis.com/2009/make-your-rails-development-environment-slower-easily
#
# Make port 80 "real life" speeds
# You can also use Mongrel ports.
# 
function slow_port {
  # Set the port variable if no port inputted. Defaulted to 80 (for Passenger).
  if [ -z "$1" ]
  then port=80
  else port=$1
  fi
  
  # Slow the ports.
  sudo ipfw pipe 1 config bw 15KByte/s
  sudo ipfw add 1 pipe 1 src-port $port
  sudo ipfw add 1 pipe 1 dst-port $port
  echo "Port $port succesfully slowed."
}

function unslow_port {
  sudo ipfw delete 1
  echo "Port succesfully un-slowed."
}
