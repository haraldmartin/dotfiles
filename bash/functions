function mkcd() {
    mkdir -p "$1"
    cd "$1"
}

function title() { 
  unset PROMPT_COMMAND
  echo -ne "\033]0;$1\007"
}

function psgrep() {
	local name=$1
	ps auxww | grep -i --color=never "[${name:0:1}]${name:1}"
}

function pid() {
  psgrep "$1" | awk '{print $2}'	
}

function killgrep() {
  id=`pid "$1"`
  pid "$id" | xargs kill -9
  echo "killed $id"
}

function pw() {
  security find-generic-password -a $1 -g 2>&1 | grep password | cut -d '"' -f2
}

function imgdim() {
  if [[ $1 == '--html' || $1 == '-h' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width=\"%d\" ",  $2) }
          /pixelHeight/ { printf("height=\"%d\" ", $2) }'
  elif [[ $1 == '--css' || $1 == '-c' ]]; then
    sips -g pixelWidth -g pixelHeight "$2" \
    |awk '/pixelWidth/  { printf("width: %dpx; ",  $2) }
          /pixelHeight/ { printf("height: %dpx; ", $2) }'
  else
    sips -g pixelWidth -g pixelHeight "$1" \
    |awk '/pixelWidth/  { printf("%d X ",  $2) }
          /pixelHeight/ { printf("%d", $2) }'
  fi
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# http://henrik.nyh.se/2008/12/git-dirty-prompt
function parse_git_dirty() {
  #[ -d .git ] || return 1
  git diff --quiet || echo "*"
  #[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "âš¡"
}

function git_info_for_prompt() {
 # [ -d .git ] || return 1
  
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    if [ -d "$g/../.dotest" ]
    then
      if test -f "$g/../.dotest/rebasing"
      then
        r="|REBASE"
      elif test -f "$g/../.dotest/applying"
      then
        r="|AM"
      else
        r="|AM/REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    elif [ -f "$g/.dotest-merge/interactive" ]
    then
      r="|REBASE-i"
      b="$(cat "$g/.dotest-merge/head-name")"
    elif [ -d "$g/.dotest-merge" ]
    then
      r="|REBASE-m"
      b="$(cat "$g/.dotest-merge/head-name")"
    elif [ -f "$g/MERGE_HEAD" ]
    then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ]
      then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
      then
        if ! b="tag: $(git describe --exact-match HEAD 2>/dev/null)"
        then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi
 
    if [ -n "$1" ]; then
      printf "$1" "${b##refs/heads/}$r"
    else
      printf " (%s%s)" "${b##refs/heads/}$r$(parse_git_dirty)"
    fi
  fi
}

function authme() {
  ssh $1 'cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
}

function gco() {
  local branch=$1
  if [[ $branch ]]; then
    git co $branch
  else
    git co master
  fi
}

function mategem() {
  mate $GEMDIR/gems/`$(which ls) $GEMDIR/gems | grep --color=never $1.* | sort | tail -1`/
}

# alternative to "rails" command to use templates
function railsapp {
  template=$1
  appname=$2
  shift 2
  rails $appname -m http://github.com/ryanb/rails-templates/raw/master/$template.rb $@
}

# Monitor HTTP requests being made from your machine with a one-liner..
# Replace "en1" below with your network interface's name (usually en0 or en1)
# (again replace "en1" with correct network interface name)
function httpdump() {
	interface="${1:-en1}"
	sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"
}
 
# All the above tested only on OS X.
# http://gist.github.com/90062

function t() {
  command="cd '`pwd`'"
  osascript -e 'tell application "Terminal" to activate' \
            -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
            -e "tell application \"Terminal\" to do script with command \"$command\" in last tab of window 1" \
            &>/dev/null
}

function isreg {
  whois $1 | grep -q 'No match' && echo "No" || echo "Yes"
}
